#include <iostream>
#include <string>
using namespace std;

class Rectangle2D
{
private: // Create a private class to maintain x & y at 0,0 and the height & width at 1,1
	double x;
	double y;
	double width;
	double height;
public:
	Rectangle2D()
	{ // Set the values
		x = 0;
		y = 0;
		width = 1;
		height = 1;
	}
	Rectangle2D(double x, double y, double width, double height)
	{
		(*this).x = x;
		(*this).y = y;
		(*this).width = width;
		(*this).height = height;
	}
	double getY() const // get y
	{
		return y;
	}
	void setY(double dopeY) // set y
	{
		y = dopeY;
	}
	double getX() const // get x
	{
		return x;
	}
	void setX(double dopeX) // set x
	{
		x = dopeX;
	}
	double getW() const // get the width
	{
		return width;
	}
	void setW(double dopeW)  // set the width
	{
		width = dopeW;
	}
	double getH() const // get the height
	{
		return height;
	}
	void setH(double dopeH) // set teh height
	{
		height = dopeH;
	}
	double getA() const // get the area
	{
		return height*width;
	}
	double getP() const // get the perimeter
	{
		return 2 * width + 2 * height;
	}
	bool contains(double x, double y) const // determains where the point is 
	{
		return (x > (*this).x - height / 2
			&& x < (*this).x + height / 2
			&& y < (*this).y + height / 2
			&& y >(*this).y - height / 2);
	}
	bool contains(Rectangle2D &r) const // determains where the point is 
	{
		return (x - width / 2 <= r.x - r.width / 2 
			&& x + width / 2 >= r.x + r.width / 2 
			&& y + height / 2 >= r.y + r.height / 2 
			&& y - height / 2 <= r.y - r.height / 2); 
	}
	bool overlaps(Rectangle2D &r) const // determains where the point is 
	{
		return (x - width / 2 < r.x - r.width / 2
			|| x + width / 2 > r.x + r.width / 2
			|| y + height / 2 > r.y + r.height / 2
			|| y - height / 2 > r.y - r.height / 2);
	}
};

int main()
{ // tests the code
	Rectangle2D r1(2, 2, 5.5, 4.9), r2(4, 5, 10.5, 3.2), r3(3, 5, 2.3, 5.4);
	cout << boolalpha << "r1 contains (3,3): " << r1.contains(3, 3) << endl;
	cout << boolalpha << "r1 contains r2: " << r1.contains(r2) << endl;
	cout << boolalpha << "r1 overlaps r3: " << r1.overlaps(r3) << endl;
}
